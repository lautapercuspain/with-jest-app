Sure, here is a corresponding unit test file for your `HeroComponent`:

```jsx
import React from 'react';
import { render, screen, fireEvent, cleanup, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import HeroComponent from './HeroComponent';

describe('HeroComponent', () => {
  afterEach(() => cleanup());

  const props = {
    image: 'http://example.com/image.jpg',
    title: 'Test Title',
    description: 'Test Description'
  };

  it('renders HeroComponent with given props', async () => {
    render(<HeroComponent {...props} />);

    const titleElement = screen.getByRole('heading', { name: /Test Title/i });
    const imageElement = screen.getByRole('img', { name: /Hero Image/i });
    const descriptionElement = screen.getByText(/Test Description/i);

    await waitFor(() => {
      expect(titleElement).toBeInTheDocument();
      expect(imageElement).toHaveAttribute('src', 'http://example.com/image.jpg');
      expect(descriptionElement).toBeInTheDocument();
    });
  });
});
``` 

For this test to work, make sure that `HeroComponent` contains elements with the roles and names that are used by `getByRole` and `getByText` in the test. The actual `HeroComponent` implementation code is not provided in your request, but there should be a heading with the title prop, an image with the image prop as its src attribute, and an element with the description prop as its content.