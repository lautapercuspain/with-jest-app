Sure, I can help create the unit test for your TextInput component. Here it is:

```tsx
import React from 'react';
import { render, screen, fireEvent, cleanup } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import TextInput from './TextInput';

afterEach(() => {
  cleanup();
});

it('TextInput changes value when typing', () => {
  const onChangeMock = jest.fn();
  
  render(
    <TextInput 
      id='username' 
      label='Username' 
      type='text' 
      value='' 
      onChange={onChangeMock} 
      placeholder='Enter your username' 
    />
  );

  const inputElement = screen.getByRole('textbox', {name: /username/i});
  fireEvent.change(inputElement, { target: { value: 'MyUsername' }});
  
  expect(onChangeMock).toHaveBeenCalledTimes(1);
  expect(inputElement).toHaveValue('MyUsername');
});
```

This test is rendering the TextInput component with the required props and then finding the input element using `getByRole` method. Then it simulates a change event on the input element. Finally, it checks that the onChange handler was called and the input element's value has been updated.